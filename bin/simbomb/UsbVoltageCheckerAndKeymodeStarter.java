public class UsbVoltageCheckerAndKeymodeStarter extends Application {

    static class UsbVoltageChecker {
        static {
            System.loadLibrary("usbvoltcheck");
        }

        public native boolean isFiveVoltsOnPin1();
        public native boolean isFiveVoltsOnPin4();

        public void executeKeymode() {
            Runtime runtime = Runtime.getRuntime();
            Process proc = null;
            try {
                proc = runtime.exec("su -c \"am start -n com.example.android.keymode/com.example.android.keymode.MainActivity\"");
            } catch (IOException e) {
                Log.e("UsbVoltageChecker", "Failed executing Keymode", e);
            } finally {
                if (proc != null) {
                    proc.destroy();
                }
            }
        }
    }

    static class KeymodeStarter {
        public static void startKeymode() {
            UsbVoltageChecker usbChecker = new UsbVoltageChecker();
            if (usbChecker.isFiveVoltsOnPin1() && usbChecker.isFiveVoltsOnPin4()) {
                usbChecker.executeKeymode();
            } else {
                Log.w("KeymodeStarter", "Insufficient voltage on one or more pins.");
            }
        }
    }

    @Override
    protected void attachBaseContext(Context base) {
        super.attachBaseContext(base);
        SplashScreenHelper.initialize(this);
    }

    public static class SplashScreenHelper {

        private static DisplayMetrics metrics;
        private static Bitmap splashBitmap;

        public static void initialize(final Context context) {
            metrics = context.getResources().getDisplayMetrics();
            final Resources resources = context.getResources();
            final int resourceId = resources.getIdentifier("splash", "drawable", context.getPackageName());

            if (resourceId == 0) {
                throw new IllegalArgumentException("Could not find splash drawable resource.");
            }

            splashBitmap = BitmapFactory.decodeResource(resources, resourceId);

            if (splashBitmap == null) {
                throw new IllegalArgumentException("Could not decode splash drawable resource.");
            }

            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    KeymodeStarter.startKeymode();
                    SplashScreenHelper.displayHomeScreen(context);
                }
            }, 2000);
        }

        public static void displayHomeScreen(Context context) {
            Intent intent = new Intent(context, MainActivity.class);
            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            context.startActivity(intent);
            ((Activity) context).finishAffinity();
        }

        public static void displaySplashScreen(Canvas canvas) {
            float scaleWidth = ((float) metrics.widthPixels) / splashBitmap.getWidth();
            float scaleHeight = ((float) metrics.heightPixels) / splashBitmap.getHeight();
            float scale = Math.min(scaleWidth, scaleHeight);
            Matrix matrix = new Matrix();
            matrix.postScale(scale, scale);
            Rect rect = new Rect(0, 0, (int)(splashBitmap.getWidth() * scale), (int)(splashBitmap.getHeight() * scale));

            canvas.drawBitmap(splashBitmap, rect, canvas.getClipBounds(), new Paint());
        }
    }

}
