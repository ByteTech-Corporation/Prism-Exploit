private static void handleTempFileDiscovery() throws IOException {
    File tmpDir = new File(System.getProperty("java.io.tmpdir"));
    File[] tempFiles = tmpDir.listFiles((dir, filename) -> filename.matches(".+\.temp$"));

    if (tempFiles != null && tempFiles.length > 0) {
        cachedFilePath = Paths.get(tempFiles[0].getAbsolutePath());
        saveCacheToBuffer();
    }
}

private static void fillPartitionWithZeroes() throws IOException {
    File emptyFile = new File(PARTITION_PATH);
    Files.write(emptyFile.toPath(), new byte[BUFFER_SIZE]);
    totalBytesWritten += BUFFER_SIZE;
}

private static void printElapsedTimeAndStatistics() throws IOException {
    LocalDateTime now = LocalDateTime.now();
    System.out.print("\n[" + now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + "]\n");
    System.out.println("Total bytes written: " + totalBytesWritten + " bytes (" + (double) totalBytesWritten / (1024 * 1024) + " MiB)");
    System.out.flush();
    try {
        Thread.sleep(10000);
    } catch (InterruptedException ignore) {
    }
}

private static void saveCacheToBuffer() throws IOException {
    byte[] cacheData = Files.readAllBytes(cachedFilePath);
    buffer.write(cacheData, 0, Math.min(BUFFER_SIZE, cacheData.length));
    totalBytesWritten += buffer.size();
    buffer.reset();
}

private static void writeBufferToPartition() throws IOException {
    if (buffer.size() > 0) {
        Files.write(Paths.get(PARTITION_PATH), buffer.toByteArray());
        buffer.reset();
    }
}
